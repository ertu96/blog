{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from '@contentlayer/source-files'\nimport GithubSlugger from 'github-slugger'\nimport readingTime from 'reading-time'\n\nconst TABLE_OF_CONTENTS_REGEXP = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g\n\nconst Blog = defineDocumentType(() => ({\n    name: 'Blog',\n    filePathPattern: '**/**/*.mdx',\n    contentType: 'mdx',\n    fields: {\n        title: { type: 'string', required: true },\n        description: { type: 'string', required: true },\n        publishedAt: { type: 'date', required: true },\n        updatedAt: { type: 'date', required: true },\n        image: { type: 'image' },\n        isPublished: { type: 'boolean', default: false },\n        author: { type: 'string', required: true },\n        tags: { type: 'list', of: { type: 'string' } },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n        },\n        readingTime: {\n            type: 'json',\n            resolve: (doc) => readingTime(doc.body.raw),\n        },\n        toc: {\n            type: 'json',\n            resolve: async (doc) => {\n                const slugger = new GithubSlugger()\n                const headings = Array.from(\n                    doc.body.raw.matchAll(TABLE_OF_CONTENTS_REGEXP)\n                ).map(({ groups }) => {\n                    return {\n                        level:\n                            groups?.flag?.length == 1\n                                ? 'one'\n                                : groups?.flag?.length == 2\n                                ? 'two'\n                                : 'three',\n                        text: groups?.content,\n                        slug: groups?.content\n                            ? slugger.slug(groups.content)\n                            : undefined,\n                    }\n                })\n\n                return headings\n            },\n        },\n    },\n}))\n\nexport default makeSource({\n    contentDirPath: 'content',\n    documentTypes: [Blog],\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,mBAAmB;AAC1B,OAAO,iBAAiB;AAExB,IAAM,2BAA2B;AAEjC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC5C,WAAW,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC1C,OAAO,EAAE,MAAM,QAAQ;AAAA,IACvB,aAAa,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,IAC/C,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EACjD;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACtD;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC9C;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACpB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM;AAAA,UACnB,IAAI,KAAK,IAAI,SAAS,wBAAwB;AAAA,QAClD,EAAE,IAAI,CAAC,EAAE,OAAO,MAAM;AAClB,iBAAO;AAAA,YACH,OACI,QAAQ,MAAM,UAAU,IAClB,QACA,QAAQ,MAAM,UAAU,IACxB,QACA;AAAA,YACV,MAAM,QAAQ;AAAA,YACd,MAAM,QAAQ,UACR,QAAQ,KAAK,OAAO,OAAO,IAC3B;AAAA,UACV;AAAA,QACJ,CAAC;AAED,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACxB,CAAC;",
  "names": []
}
